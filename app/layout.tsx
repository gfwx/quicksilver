import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { cookies } from 'next/headers';
import './globals.css';
const inter = Inter({ subsets: ['latin'] });
import { AuthProvider } from '@/lib/contexts/AuthContext';
import type { User } from '@/lib/types';

const serverUrl = process.env.NEXT_PUBLIC_EXPRESS_SERVER_PATH

export const metadata: Metadata = {
  title: 'Quicksilver',
  description: 'Generated by create next app',
};


export default async function RootLayout({ children }: { children: React.ReactNode }) {
  let user = null;

  try {
    // Get cookies from the incoming request
    const cookieStore = await cookies();
    const userData = cookieStore.get('user-data')?.value;

    // First try to get user data from the cookie set by middleware
    if (userData) {
      try {
        user = JSON.parse(userData) as User;
      } catch (error) {
        console.error('Failed to decrypt user data from cookie:', error);
      }
    }

    if (user)
      console.log(`User found: ${user.firstName}`)

    // If we don't have user data from cookie, try the API as fallback
    if (!user) {
      const sessionCookie = cookieStore.get('wos-session')?.value;

      // Only make the API call if we have a session cookie
      if (sessionCookie) {
        const response = await fetch(`${serverUrl}/api/user/me`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            // Forward the cookie manually
            'Cookie': `wos-session=${sessionCookie}`
          }
        });

        if (response.ok) {
          const userData = await response.json();
          user = userData.user;
        }
      }
    }
  } catch (error) {
    console.error('Failed to fetch user on server:', error);
    // user remains null, which is handled gracefully
  }

  return (
    <>
      <html lang="en" suppressHydrationWarning>
        <body className={inter.className}>
          <AuthProvider user={user}>
            {children}
          </AuthProvider>
        </body>
      </html>
    </>
  );
}
